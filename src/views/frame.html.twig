<html>
<head>
    <meta charset="utf-8">
    <title>Blockly Demo: Code</title>

    <script type="text/javascript" src="{{ blockly_lib('blockly_compressed.js') }}"></script>
    <script type="text/javascript" src="{{ blockly_lib('blocks_compressed.js') }}"></script>
    <script type="text/javascript" src="{{ blockly_lib('arduino_compressed.js') }}"></script>
    <script type="text/javascript" src="{{ blockly_lib('msg/js/en.js') }}"></script>

    <script src="{{ script('jquery-1.12.4.min.js') }}"></script>

    <style>
        html, body {
            height: 100%;
            background-color: #fff;
        }

        body {
            background-color: #fff;
            font-family: sans-serif;
            margin: 0;
            overflow: hidden;
        }

        h1 {
            font-weight: normal;
            font-size: 140%;
            margin-left: 5px;
            margin-right: 5px;
        }

        .blocklySvg {
            width: 100%;
            height: 100%;
            border-top: none !important;
        }

        #content_xml {
            resize: none;
            outline: none;
            border: none;
            font-family: monospace;
            overflow: scroll;
        }
    </style>
    <script>
        /**
         * Initialize Blockly.  Called on page load.
         */
        function init() {
            //window.onbeforeunload = function() {
            //  return 'Leaving this page will result in the loss of your work.';
            //};

            var toolbox = document.getElementById('toolbox');
            Blockly.inject(document.getElementById('content_blocks'), {
                grid: {
                    spacing: 25,
                    length: 3,
                    colour: '#ccc',
                    snap: true
                },
                media: '../../media/',
                toolbox: toolbox
            });

            if (window.parent.init) {
                // Let the top-level application know that Blockly is ready.
                window.parent.init(Blockly);
            }
            else {
                // Attempt to diagnose the problem.
                var msg = 'Error: Unable to communicate between frames.\n\n';
                if (window.parent == window) {
                    msg += 'Try loading index.html instead of frame.html';
                }
                else if (window.location.protocol == 'file:') {
                    msg += 'This may be due to a security restriction preventing\n' +
                            'access when using the file:// protocol.\n' +
                            'http://code.google.com/p/chromium/issues/detail?id=47416';
                }
                alert(msg);
            }

            // Send the mousemove event to parent frame
            // in order for serial monitor draggable to work when mouse is above the iframe
            $(window).on('mousemove', function (event) {
                var $target = window.parent.$('#ns_draggable_handle');
                event.type = 'mousemove.draggable';
                event.target = $target.get(0);
                $target.trigger(event);
            });
        }
    </script>
</head>
<body onload="init()">
<div id="content_blocks" class="content"></div>

<xml id="toolbox" style="display: none">
    <category name="Logic">
        <block type="controls_if"></block>
        <block type="logic_compare"></block>
        <block type="logic_operation"></block>
        <block type="logic_negate"></block>
        <block type="logic_null"></block>
    </category>
    <category name="Control">
        <block type="base_delay">
            <value name="DELAY_TIME">
                <block type="math_number">
                    <field name="NUM">1000</field>
                </block>
            </value>
        </block>
        <block type="controls_for">
            <value name="FROM">
                <block type="math_number">
                    <field name="NUM">1</field>
                </block>
            </value>
            <value name="TO">
                <block type="math_number">
                    <field name="NUM">10</field>
                </block>
            </value>
        </block>
        <block type="controls_whileUntil"></block>
    </category>
    <category name="Math">
        <block type="math_number"></block>
        <block type="math_arithmetic"></block>
        <block type="base_map">
            <value name="DMAX">
                <block type="math_number">
                    <field name="NUM">180</field>
                </block>
            </value>
        </block>
    </category>
    <category name="Text">
        <block type="text"></block>
    </category>
    <category name="Variables" custom="VARIABLE"></category>
    <category name="Functions" custom="PROCEDURE"></category>
    <sep></sep>
    <category name="Input/Output">
        <block type="inout_highlow"></block>
        <block type="inout_digital_write"></block>
        <block type="inout_digital_read"></block>
        <block type="inout_analog_write">
            <value name="NUM">
                <block type="math_number">
                    <field name="NUM">0</field>
                </block>
            </value>
        </block>
        <block type="inout_analog_read"></block>
        <block type="serial_print">
            <value name="CONTENT">
                <block type="text">
                    <field name="TEXT"></field>
                </block>
            </value>
        </block>
        <block type="inout_tone">
            <value name="NUM">
                <block type="math_number">
                    <field name="NUM">440</field>
                </block>
            </value>
        </block>
        <block type="inout_notone"></block>
        <block type="inout_buildin_led"></block>
    </category>
    <category name="Servo">
        <block type="servo_move">
            <value name="DEGREE">
                <block type="math_number">
                    <field name="NUM">0</field>
                </block>
            </value>
            <value name="DELAY_TIME">
                <block type="math_number">
                    <field name="NUM">1000</field>
                </block>
            </value>
        </block>
        <block type="servo_read_degrees"></block>
    </category>
    <category name="Grove Analog">
        <block type="grove_rotary_angle"></block>
        <block type="grove_temporature_sensor"></block>
        <block type="grove_sound_sensor"></block>
        <block type="grove_thumb_joystick"></block>
    </category>
    <category name="Grove">
        <block type="grove_led"></block>
        <block type="grove_button"></block>
        <block type="grove_relay"></block>
        <block type="grove_tilt_switch"></block>
        <block type="grove_piezo_buzzer"></block>
        <block type="grove_pir_motion_sensor"></block>
        <block type="grove_line_finder"></block>
        <block type="grove_rgb_led"></block>
        <block type="grove_ultrasonic_ranger"></block>
    </category>
    <category name="Grove LCD">
        <block type="grove_serial_lcd_print">
            <value name="TEXT">
                <block type="text">
                    <field name="TEXT"></field>
                </block>
            </value>
            <value name="TEXT2">
                <block type="text">
                    <field name="TEXT"></field>
                </block>
            </value>
            <value name="DELAY_TIME">
                <block type="math_number">
                    <field name="NUM">1000</field>
                </block>
            </value>
        </block>
        <block type="grove_serial_lcd_power"></block>
        <block type="grove_serial_lcd_effect"></block>
    </category>
    <category name="Grove Motor">
        <block type="grove_motor_shield"></block>
    </category>
</xml>
</body>
</html>
